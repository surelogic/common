#  XXXXX                          XXXXX                      
# X     X                           X
# X                                 X
# X       XX  XX  XXX XX   XXXXX    X      XXXXX   XXXXXX  XXX     XXXXX
#  XXXXX   X   X    XX  X X     X   X     X     X X    X     X    X     X
#       X  X   X    X     XXXXXXX   X     X     X X    X     X    X
#       X  X   X    X     X         X     X     X X    X     X    X
# X     X  X  XX    X     X     X   X   X X     X  XXXXX     X    X     X
#  XXXXX    XX XX XXXXX    XXXXX  XXXXXXX  XXXXX       X   XXXXX   XXXXX
#                                                      X
#                                                  XXXX
#
# Default query bank file.

#------------------------------------------------------------------------
# Numbered Queries
#
# Please keep in numerical order
#------------------------------------------------------------------------
query.00001=select PROJECT from PROJECT_OVERVIEW order by PROJECT
#This query returns finding types, and any related filter sets that belong to buglink and explicitly include this finding type.
query.00002=select T.NAME, T.SHORT_MESSAGE, T.UUID from FINDING_TYPE T order by 1,2
query.00003=select distinct T.NAME, A.MNEMONIC, A.LINK, A.CATEGORY from FINDING_TYPE F, ARTIFACT_TYPE A, TOOL T where T.ID=A.TOOL_ID and F.ID=A.FINDING_TYPE_ID and F.UUID='%s'
query.00004=select INFO from FINDING_TYPE where UUID='%s'
#query.00005=select FO.SUMMARY, FO.IMPORTANCE, FO.FINDING_ID, FO.PROJECT, FO.PACKAGE, FO.CLASS, FO.LINE_OF_CODE, FO.FINDING_TYPE, FO.CATEGORY, FO.TOOL, FO.ASSURANCE_TYPE from FINDINGS_OVERVIEW FO %s order by case when FO.IMPORTANCE='Irrelevant' then 5 when FO.IMPORTANCE='Low' then 4 when FO.IMPORTANCE='Medium' then 3 when FO.IMPORTANCE='High' then 2 when FO.IMPORTANCE='Critical' then 1 end, FO.SUMMARY
#query.00006=select FO.%s, count(*) from FINDINGS_OVERVIEW FO %s group by %s
query.00007=create table VERSION (N INT NOT NULL)
query.00008=drop table VERSION
query.00009=select N from VERSION
query.00010=insert into VERSION values (0)
query.00011=update VERSION set N=%d
query.00012=select S.SCHEMANAME "SCHEMA", T.TABLENAME "TABLE NAME" from SYS.SYSTABLES T, SYS.SYSSCHEMAS S where T.SCHEMAID = S.SCHEMAID order by 1,2
query.00013=select C.COLUMNNAME "COLUMN NAME", C.COLUMNDATATYPE "TYPE NAME" from SYS.SYSCOLUMNS C, SYS.SYSTABLES T, SYS.SYSSCHEMAS S where C.REFERENCEID=T.TABLEID and T.SCHEMAID=S.SCHEMAID and T.TABLENAME='%s' and S.SCHEMANAME='%s' order by C.COLUMNNUMBER
query.00014=select T.NAME, A.MESSAGE, CU.PACKAGE_NAME, SL.CLASS_NAME, SL.LINE_OF_CODE, SL.END_LINE_OF_CODE, SL.LOCATION_TYPE, SL.IDENTIFIER from ARTIFACT A, ARTIFACT_TYPE ART, TOOL T, SOURCE_LOCATION SL, COMPILATION_UNIT CU where A.ID=%d and ART.ID=A.ARTIFACT_TYPE_ID and T.ID=ART.TOOL_ID and SL.ID=A.PRIMARY_SOURCE_LOCATION_ID and CU.ID=SL.COMPILATION_UNIT_ID
query.00015=select CU.PACKAGE_NAME, SL.CLASS_NAME, SL.LINE_OF_CODE, SL.END_LINE_OF_CODE, SL.LOCATION_TYPE, SL.IDENTIFIER from ARTIFACT_SOURCE_LOCATION_RELTN ASLR, SOURCE_LOCATION SL, COMPILATION_UNIT CU where ASLR.ARTIFACT_ID=%d and SL.ID=ASLR.SOURCE_LOCATION_ID and CU.ID=SL.COMPILATION_UNIT_ID
query.00016=select A.FINDING_ID, SU.USER_NAME, A.EVENT, A.VALUE, A.DATE_TIME from SIERRA_AUDIT A left outer join SIERRA_USER SU on SU.ID = A.USER_ID where FINDING_ID=%d order by A.DATE_TIME
query.00017=select P.NAME, S.DATE_TIME, S.COMMIT_COUNT, S.UPDATE_COUNT from SYNCH S, PROJECT P where P.ID = S.PROJECT_ID order by 2 desc, 1
query.00018=delete from FIELD where RUN = ? and ID in (select ID from FIELD where RUN = ? except select FIELD from ACCESS where RUN = ?)
query.00019=delete from OBJECT where RUN=? and ID=?
query.00020=insert into RUN (Name, RawDataVersion, UserName, JavaVersion, JavaVendor, OsName, OsArch, OsVersion, MaxMemoryMB, Processors, Started) values (?,?,?,?,?,?,?,?,?,?,?)
query.00021=select * from RUN where Name=? and Started=?
query.00022=select * from RUN where Run=?
query.00023=select * from RUN
query.00024=delete from %s where Run=%d

#------------------------------------------------------------------------
# Schema update queries
#------------------------------------------------------------------------
SchemaUtil.checkFindingTypeCategories=SELECT UUID FROM FINDING_TYPE WHERE \
	ID IN ((SELECT ID FROM FINDING_TYPE) \
		    EXCEPT \
		   (SELECT DISTINCT FINDING_TYPE_ID FROM FILTER_ENTRY WHERE FILTERED = 'N')) 
SchemaUtil.categoriesFromArtifactTypes=SELECT DISTINCT T.NAME,ART.CATEGORY,FT.UUID \
	FROM ARTIFACT_TYPE ART, TOOL T, FINDING_TYPE FT \
	WHERE T.ID = ART.TOOL_ID AND \
	FT.ID = ART.FINDING_TYPE_ID \
	ORDER BY 1,2,3

#------------------------------------------------------------------------
# Finder queries
#------------------------------------------------------------------------

FindingsSelectionView.show=select FO.SUMMARY, FO.IMPORTANCE, FO.FINDING_ID, FO.PROJECT, FO.PACKAGE, FO.CLASS, FO.LINE_OF_CODE, FO.FINDING_TYPE, FO.FINDING_TYPE_NAME, FO.TOOL, FO.ASSURANCE_TYPE from FINDINGS_OVERVIEW FO %s order by case when FO.IMPORTANCE='Irrelevant' then 5 when FO.IMPORTANCE='Low' then 4 when FO.IMPORTANCE='Medium' then 3 when FO.IMPORTANCE='High' then 2 when FO.IMPORTANCE='Critical' then 1 end, 4,5,6,7,FO.SUMMARY
FindingsSelectionView.count=select %s, count(*) from FINDINGS_OVERVIEW FO %s group by %s

FindingsSelectionView.showJoin=select FJ.SUMMARY, FJ.IMPORTANCE, FJ.FINDING_ID, FJ.PROJECT, FJ.PACKAGE, FJ.CLASS, FJ.LINE_OF_CODE, FJ.FINDING_TYPE, FJ.FINDING_TYPE_NAME, FJ.TOOL, FJ.ASSURANCE_TYPE from FINDINGS_OVERVIEW FO, FINDINGS_OVERVIEW FJ %s order by case when FJ.IMPORTANCE='Irrelevant' then 5 when FJ.IMPORTANCE='Low' then 4 when FJ.IMPORTANCE='Medium' then 3 when FJ.IMPORTANCE='High' then 2 when FJ.IMPORTANCE='Critical' then 1 end, 4,5,6,7,FJ.SUMMARY
FindingsSelectionView.countJoin=select %s, count(*) from FINDINGS_OVERVIEW FO, FINDINGS_OVERVIEW FJ %s group by %s

FindingsSelectionView.countModels=select %s, count(*), max(FO.ASSURANCE_TYPE), max(FO.FINDING_TYPE), max(FO.SUMMARY) from FINDINGS_OVERVIEW FO, FINDINGS_OVERVIEW FJ %s group by %s


#------------------------------------------------------------------------
# Named Queries
#------------------------------------------------------------------------
portal.finding.byId=SELECT F.ID,F.IMPORTANCE,F.SUMMARY,FT.NAME,P.NAME,LM.PACKAGE_NAME,LM.CLASS_NAME FROM FINDING F, LOCATION_MATCH LM, FINDING_TYPE FT, PROJECT P WHERE F.ID = ? AND LM.FINDING_ID = F.ID AND FT.ID = LM.FINDING_TYPE_ID AND P.ID = LM.PROJECT_ID
portal.finding.byUuid=SELECT F.ID,F.IMPORTANCE,F.SUMMARY,FT.NAME,P.NAME,LM.PACKAGE_NAME,LM.CLASS_NAME FROM FINDING F, LOCATION_MATCH LM, FINDING_TYPE FT, PROJECT P WHERE F.UUID = ? AND LM.FINDING_ID = F.ID AND FT.ID = LM.FINDING_TYPE_ID AND P.ID = LM.PROJECT_ID
portal.finding.auditsById=SELECT A.EVENT, A.VALUE, A.DATE_TIME, U.USER_NAME FROM SIERRA_AUDIT A, SIERRA_USER U WHERE FINDING_ID = ? AND U.ID = A.USER_ID ORDER BY A.DATE_TIME
portal.finding.artifactsById=SELECT S.SCAN_DATE_TIME, T.NAME, ART.MNEMONIC_DISPLAY, A.MESSAGE \
	FROM ARTIFACT_FINDING_RELTN AFR, ARTIFACT A, ARTIFACT_TYPE ART, TOOL T, SCAN S \
	WHERE AFR.FINDING_ID = ? AND A.ID = AFR.ARTIFACT_ID AND ART.ID = A.ARTIFACT_TYPE_ID AND T.ID = ART.TOOL_ID AND S.ID = A.SCAN_ID \
	ORDER BY S.SCAN_DATE_TIME DESC
#------------------------------------------------------------------------
# Revision
#------------------------------------------------------------------------
Revision.maxRevision=SELECT MAX(REVISION) FROM REVISION

#------------------------------------------------------------------------
# Finding Relations
#------------------------------------------------------------------------
FindingRelationOverview.listForParent=SELECT PARENT_FINDING_ID,CHILD_FINDING_ID,PROJECT_ID,RELATION_TYPE,STATUS from FINDING_RELATION_OVERVIEW where PARENT_FINDING_ID = ?
FindingRelationOverview.listForChild=SELECT PARENT_FINDING_ID,CHILD_FINDING_ID,PROJECT_ID,RELATION_TYPE,STATUS from FINDING_RELATION_OVERVIEW where CHILD_FINDING_ID = ?

#------------------------------------------------------------------------
# Definitional Data
#------------------------------------------------------------------------
Definitions.insertDefinition=INSERT INTO SERVER_DEFINITION_RELTN (DEFINITION_UUID,SERVER_UUID) VALUES (?,?)
Definitions.deleteDefinition=DELETE FROM SERVER_DEFINITION_RELTN WHERE DEFINITION_UUID = ?
Definitions.getDefinitionServer=SELECT SDR.SERVER_UUID, SI.NAME \
	FROM SERVER_DEFINITION_RELTN SDR LEFT OUTER JOIN SERVER_IDENTITY SI ON SI.UUID = SDR.SERVER_UUID \
	WHERE SDR.DEFINITION_UUID = ?

#------------------------------------------------------------------------
# Report Settings
#------------------------------------------------------------------------
ReportSettings.delete=DELETE FROM REPORT_SETTINGS WHERE USER_ID = ? AND UUID = ?
ReportSettings.insert=INSERT INTO REPORT_SETTINGS (USER_ID,UUID,REPORT_UUID,TITLE,DESCRIPTION) VALUES (?,?,?,?,?)
ReportSettings.insertParam=INSERT INTO REPORT_SETTINGS_PARAM (REPORT_SETTINGS_UUID,PARAM_NAME,PARAM_VALUE,ORDINAL) VALUES (?,?,?,?)
ReportSettings.selectUserSetting=SELECT UUID,REPORT_UUID,TITLE,DESCRIPTION FROM REPORT_SETTINGS WHERE USER_ID = ? AND UUID = ?
ReportSettings.listUserSettings=SELECT UUID,REPORT_UUID,TITLE,DESCRIPTION FROM REPORT_SETTINGS WHERE USER_ID = ?
ReportSettings.listSettingParams=SELECT PARAM_NAME,PARAM_VALUE FROM REPORT_SETTINGS_PARAM WHERE REPORT_SETTINGS_UUID = ? ORDER BY PARAM_NAME,ORDINAL
#------------------------------------------------------------------------
# Finding Types
#------------------------------------------------------------------------
FindingTypes.findByUid=SELECT ID,UUID,NAME,SHORT_MESSAGE,INFO FROM FINDING_TYPE WHERE UUID = ?
FindingTypes.findById=SELECT ID,UUID,NAME,SHORT_MESSAGE,INFO FROM FINDING_TYPE WHERE ID = ?
FindingTypes.findArtifactTypeById=SELECT ART.ID,T.NAME,ART.MNEMONIC,ART.MNEMONIC_DISPLAY,T.VERSION FROM ARTIFACT_TYPE ART, TOOL T WHERE ART.FINDING_TYPE_ID = ? AND T.ID = ART.TOOL_ID
FindingTypes.artifactsByTool=SELECT ART.ID,T.NAME,ART.MNEMONIC,ART.MNEMONIC_DISPLAY,T.VERSION FROM ARTIFACT_TYPE ART, TOOL T WHERE ART.TOOL_ID = T.ID AND T.NAME = ? AND T.VERSION = ?
FindingTypes.listFindingTypes=SELECT UUID FROM FINDING_TYPE ORDER BY NAME
FindingTypes.scanFiltersIncluding=SELECT S.UUID,S.NAME FROM SETTING_FILTERS SF, SETTINGS S WHERE SF.FINDING_TYPE_ID = ? AND S.ID = SF.SETTINGS_ID AND SF.FILTERED = 'N'
FindingTypes.categoriesReferencing=SELECT FS.UUID,FS.NAME,FS.INFO,FE.FILTERED FROM FILTER_ENTRY FE, FILTER_SET FS WHERE FE.FINDING_TYPE_ID = ? AND FS.ID = FE.FILTER_SET_ID
FindingTypes.excludingCategories=SELECT * FROM SETTING_FILTERS WHERE FINDING_TYPE_ID = ? AND FILTERED = 'Y'
FindingTypes.query=SELECT UUID,NAME FROM FINDING_TYPE WHERE NAME LIKE ? ORDER BY NAME
FindingTypes.registerExtension=INSERT INTO EXTENSION (NAME,VERSION,PATH) VALUES (?,?,?)
FindingTypes.registerExtensionArtifact=INSERT INTO EXTENSION_ARTIFACT_TYPE_RELTN (EXTENSION_ID,ARTIFACT_TYPE_ID) VALUES (?,?)
FindingTypes.registerExtensionFindingType=INSERT INTO EXTENSION_FINDING_TYPE_RELTN (EXTENSION_ID,FINDING_TYPE_ID) VALUES (?,?)
FindingTypes.selectExtension=SELECT ID,NAME,VERSION,PATH FROM EXTENSION WHERE NAME = ? AND VERSION = ?
FindingTypes.selectExtensions=SELECT ID,NAME,VERSION,PATH FROM EXTENSION
FindingTypes.selectExtensionArtifactTypes=SELECT FT.UUID,ART.ID,T.NAME,ART.MNEMONIC,ART.MNEMONIC_DISPLAY,T.VERSION FROM EXTENSION_ARTIFACT_TYPE_RELTN E, ARTIFACT_TYPE ART, TOOL T, FINDING_TYPE FT WHERE E.EXTENSION_ID = ? AND ART.ID = E.ARTIFACT_TYPE_ID AND T.ID = ART.TOOL_ID AND FT.ID = ART.FINDING_TYPE_ID
FindingTypes.selectExtensionFindingTypes=SELECT FT.UUID FROM EXTENSION_FINDING_TYPE_RELTN EFTR, FINDING_TYPE FT WHERE EFTR.EXTENSION_ID = ? AND FT.ID = EFTR.FINDING_TYPE_ID
FindingTypes.insertArtifactType=INSERT INTO ARTIFACT_TYPE (TOOL_ID,MNEMONIC,MNEMONIC_DISPLAY,CATEGORY,LINK,INFO,FINDING_TYPE_ID) VALUES ((SELECT ID FROM TOOL WHERE NAME = ? AND VERSION = ?),?,?,?,?,?,(SELECT ID FROM FINDING_TYPE WHERE UUID = ?))
FindingTypes.insertFindingType=INSERT INTO FINDING_TYPE (UUID,NAME,SHORT_MESSAGE,INFO) VALUES (?,?,?,?)
FindingTypes.extensionDependency=SELECT E.NAME,E.VERSION FROM FINDING_TYPE FT, EXTENSION_FINDING_TYPE_RELTN EFTR, EXTENSION E WHERE FT.UUID = ? AND EFTR.FINDING_TYPE_ID = FT.ID AND E.ID = EFTR.EXTENSION_ID 

#------------------------------------------------------------------------
# Projects
#------------------------------------------------------------------------
Projects.query=SELECT NAME FROM PROJECT WHERE NAME LIKE ? ORDER BY NAME
Projects.listProjects=SELECT P.ID,P.NAME,S.UUID FROM PROJECT P \
   LEFT OUTER JOIN SETTINGS_PROJECT_RELTN SPR ON SPR.PROJECT_NAME = P.NAME \
   LEFT OUTER JOIN SETTINGS S ON S.ID = SPR.SETTINGS_ID 
Projects.deleteScanFilter=DELETE FROM SETTINGS_PROJECT_RELTN WHERE PROJECT_NAME = ?
Projects.insertScanFilter=INSERT INTO SETTINGS_PROJECT_RELTN (PROJECT_NAME, SETTINGS_ID) VALUES (?,(SELECT ID FROM SETTINGS WHERE UUID = ?))

#------------------------------------------------------------------------
# Scans
#------------------------------------------------------------------------
Scans.projectScans=SELECT S.UUID, SU.USER_NAME, P.NAME, S.JAVA_VERSION, S.JAVA_VENDOR, S.SCAN_DATE_TIME, S.STATUS, S.IS_PARTIAL \
     FROM  PROJECT P INNER JOIN SCAN S ON S.PROJECT_ID = P.ID LEFT OUTER JOIN SIERRA_USER SU ON SU.ID = S.USER_ID WHERE P.NAME = ? \
     ORDER BY S.SCAN_DATE_TIME DESC
Scans.latestProjectScan=SELECT S.UUID, SU.USER_NAME, LS.PROJECT, S.JAVA_VERSION, S.JAVA_VENDOR, S.SCAN_DATE_TIME, S.STATUS, S.IS_PARTIAL \
     FROM LATEST_SCANS LS INNER JOIN SCAN S ON S.ID = LS.SCAN_ID LEFT OUTER JOIN SIERRA_USER SU ON SU.ID = S.USER_ID WHERE LS.PROJECT = ?
Scans.scanCompilations=SELECT CU.PACKAGE_NAME,CU.CU FROM SCAN S, METRIC_CU M, COMPILATION_UNIT CU \
   WHERE S.UUID = ? AND \
         M.SCAN_ID = S.ID AND \
         CU.ID = M.COMPILATION_UNIT_ID
Scans.scanFindingDetails=SELECT S.SCAN_DATE_TIME,P.NAME,COUNT(DISTINCT SO.FINDING_ID) \
	FROM SCAN S, PROJECT P, SCAN_OVERVIEW SO \
	WHERE S.UUID = ? AND P.ID = S.PROJECT_ID \
		AND SO.SCAN_ID = S.ID \
	GROUP BY S.SCAN_DATE_TIME,P.NAME
Scans.scanMetricDetails=SELECT COUNT(DISTINCT CU.PACKAGE_NAME), COUNT(CU.ID), SUM(M.LINES_OF_CODE) \
	FROM SCAN S, METRIC_CU M, COMPILATION_UNIT CU \
	WHERE S.UUID = ? AND M.SCAN_ID = S.ID AND CU.ID = M.COMPILATION_UNIT_ID
Scans.scanExtensions=SELECT E.NAME,E.VERSION FROM SCAN S, SCAN_EXTENSION SE, EXTENSION E \
	WHERE S.UUID = ? AND SE.SCAN_ID = S.ID AND E.ID = SE.EXTENSION_ID 
Scans.insertSettingsEntry=INSERT INTO SCAN_SETTINGS (SCAN_ID,UUID,NAME,REVISION) \
	VALUES ((SELECT ID FROM SCAN WHERE UUID = ?),?,?,?)
Scans.insertSettingFilter=INSERT INTO SCAN_SETTING_FILTERS (SCAN_ID,FINDING_TYPE_ID,IMPORTANCE,FILTERED) \
	VALUES ((SELECT ID FROM SCAN WHERE UUID = ?),(SELECT MAX(ID) FROM FINDING_TYPE WHERE UUID = ?),?,?)
Scans.selectSettingsEntry=SELECT UUID,NAME,REVISION FROM SCAN_SETTINGS WHERE SCAN_ID = (SELECT ID FROM SCAN WHERE UUID = ?)
Scans.selectSettingFilters=SELECT FT.UUID,SF.IMPORTANCE,SF.FILTERED \
	FROM SCAN_SETTING_FILTERS SF, FINDING_TYPE FT \
	WHERE FT.ID = SF.FINDING_TYPE_ID AND SF.SCAN_ID = (SELECT ID FROM SCAN WHERE UUID = ?)
Scans.unfinishedScans=SELECT UUID FROM SCAN WHERE STATUS != 'FINISHED'
Scans.insertExtension=INSERT INTO SCAN_EXTENSION (SCAN_ID, EXTENSION_ID) VALUES (?,?)
Scans.selectExtension=SELECT ID FROM EXTENSION WHERE NAME = ? AND VERSION = ?
#------------------------------------------------------------------------
# Filter Sets (Ad-Hoc Categories)
#------------------------------------------------------------------------
FilterSetRecord.generated=true
FilterSetRecord.insert=INSERT INTO FILTER_SET (UUID,REVISION,NAME,INFO) VALUES (?,?,?,?)
FilterSetRecord.select=SELECT ID,REVISION,NAME,INFO FROM FILTER_SET WHERE UUID = ?
FilterSetRecord.delete=DELETE FROM FILTER_SET WHERE ID = ?
FilterSetRecord.update=UPDATE FILTER_SET SET REVISION = ?, NAME = ?, INFO = ? WHERE ID = ?

FilterSets.latestServerRevisions=SELECT SDR.SERVER_UUID,MAX(FS.REVISION) \
   FROM FILTER_SET FS, SERVER_DEFINITION_RELTN SDR WHERE FS.UUID = SDR.DEFINITION_UUID GROUP BY SDR.SERVER_UUID
FilterSets.listServerDeletions=SELECT DEFINITION_UUID FROM DELETED_DEFINITIONS WHERE SERVER_UUID = ? AND REVISION > ? AND DEFINITION_TYPE = 'CATEGORY'
FilterSets.insertDeletedFilterSet=INSERT INTO DELETED_DEFINITIONS (DEFINITION_UUID,SERVER_UUID,REVISION,DEFINITION_TYPE) VALUES (?,?,?,'CATEGORY')
FilterSets.listServerFilterSets=SELECT FS.UUID FROM FILTER_SET FS, SERVER_DEFINITION_RELTN SDR WHERE SDR.SERVER_UUID = ? AND FS.UUID = SDR.DEFINITION_UUID
FilterSets.listFilterSets=SELECT UUID FROM FILTER_SET
FilterSets.listFilterSetFilters=SELECT FT.UUID,FE.FILTERED FROM FILTER_ENTRY FE, FINDING_TYPE FT WHERE FE.FILTER_SET_ID = ? AND FT.ID = FE.FINDING_TYPE_ID
FilterSets.listFilterSetParents=SELECT FS.UUID FROM FILTER_SET_RELTN FSR, FILTER_SET FS WHERE FSR.CHILD_ID = ? AND FS.ID = FSR.PARENT_ID
FilterSets.listFilterSetChildren=SELECT FS.UUID FROM FILTER_SET_RELTN FSR, FILTER_SET FS WHERE FSR.PARENT_ID = ? AND FS.ID = FSR.CHILD_ID
FilterSets.deleteFilterSetParents=DELETE FROM FILTER_SET_RELTN WHERE CHILD_ID = ?
FilterSets.insertFilterSetParent=INSERT INTO FILTER_SET_RELTN (CHILD_ID, PARENT_ID) VALUES (?,?)
FilterSets.findParents=SELECT PFS.UUID FROM FILTER_SET CFS, FILTER_SET PFS, FILTER_SET_RELTN FSR WHERE CFS.UUID = ? AND FSR.CHILD_ID = CFS.ID AND PFS.ID = FSR.PARENT_ID
FilterSets.deleteFilterSetEntries=DELETE FROM FILTER_ENTRY WHERE FILTER_SET_ID = ?
FilterSets.insertFilterSetEntry=INSERT INTO FILTER_ENTRY (FILTER_SET_ID, FINDING_TYPE_ID, FILTERED) VALUES (?,(SELECT MAX(ID) FROM FINDING_TYPE WHERE UUID = ?), ?)
FilterSets.query=SELECT UUID,NAME FROM FILTER_SET WHERE NAME LIKE ? ORDER BY NAME
FilterSets.scanFiltersUsing=SELECT S.UUID, S.NAME FROM SETTING_FILTER_SETS SF, SETTINGS S WHERE SF.FILTER_SET_ID = ? AND S.ID = SF.SETTINGS_ID
FilterSets.checkFindingType=SELECT UUID FROM FINDING_TYPE WHERE UUID = ?
FilterSets.extensionDependencies=SELECT DISTINCT E.NAME,E.VERSION FROM FILTER_SET FS, FILTER_ENTRY FE, EXTENSION_FINDING_TYPE_RELTN EFTR, EXTENSION E WHERE FS.UUID = ? AND FE.FILTER_SET_ID = FS.ID AND EFTR.FINDING_TYPE_ID = FE.FINDING_TYPE_ID AND E.ID = EFTR.EXTENSION_ID
#------------------------------------------------------------------------
# Scan Filters
#------------------------------------------------------------------------
ScanFilterRecord.generated=true
ScanFilterRecord.insert=INSERT INTO SETTINGS (UUID,NAME,REVISION) VALUES (?,?,?)
ScanFilterRecord.select=SELECT ID,NAME,REVISION FROM SETTINGS WHERE UUID = ?
ScanFilterRecord.delete=DELETE FROM SETTINGS WHERE ID = ?
ScanFilterRecord.update=UPDATE SETTINGS SET REVISION = ?, NAME = ? WHERE ID = ?

ScanFilters.latestServerRevisions=SELECT SDR.SERVER_UUID,MAX(S.REVISION) \
   FROM SETTINGS S, SERVER_DEFINITION_RELTN SDR WHERE S.UUID = SDR.DEFINITION_UUID GROUP BY SDR.SERVER_UUID
ScanFilters.listServerDeletions=SELECT DEFINITION_UUID FROM DELETED_DEFINITIONS WHERE SERVER_UUID = ? AND REVISION > ? AND DEFINITION_TYPE = 'SCANFILTER'
ScanFilters.insertDeletedScanFilter=INSERT INTO DELETED_DEFINITIONS (DEFINITION_UUID,SERVER_UUID,REVISION,DEFINITION_TYPE) VALUES (?,?,?,'SCANFILTER')
ScanFilters.deleteTypeFilters=DELETE FROM SETTING_FILTERS WHERE SETTINGS_ID = ?
ScanFilters.deleteCategoryFilters=DELETE FROM SETTING_FILTER_SETS WHERE SETTINGS_ID = ?
ScanFilters.insertTypeFilter=INSERT INTO SETTING_FILTERS (SETTINGS_ID,FINDING_TYPE_ID,IMPORTANCE,FILTERED) VALUES (?,(SELECT MAX(ID) FROM FINDING_TYPE WHERE UUID = ?),?,?)
ScanFilters.insertCategoryFilter=INSERT INTO SETTING_FILTER_SETS (SETTINGS_ID,FILTER_SET_ID,IMPORTANCE) VALUES (?,(SELECT MAX(ID) FROM FILTER_SET WHERE UUID = ?),?)
ScanFilters.listScanFilters=SELECT UUID FROM SETTINGS
ScanFilters.listServerScanFilters=SELECT S.UUID FROM SETTINGS S, SERVER_DEFINITION_RELTN SDR WHERE S.UUID = SDR.DEFINITION_UUID AND SDR.SERVER_UUID = ?
ScanFilters.listFilterSets=SELECT FS.UUID,SFS.IMPORTANCE FROM SETTINGS S, SETTING_FILTER_SETS SFS, FILTER_SET FS WHERE S.UUID = ? AND SFS.SETTINGS_ID = S.ID AND FS.ID = SFS.FILTER_SET_ID
ScanFilters.listFilters=SELECT FT.UUID, SF.IMPORTANCE, SF.FILTERED FROM SETTINGS S, SETTING_FILTERS SF, FINDING_TYPE FT WHERE S.UUID = ? AND SF.SETTINGS_ID = S.ID AND FT.ID = SF.FINDING_TYPE_ID 
ScanFilters.selectByProject=SELECT S.UUID FROM SETTINGS S, SETTINGS_PROJECT_RELTN SP WHERE SP.PROJECT_NAME = ? AND S.ID = SP.SETTINGS_ID
ScanFilters.selectDefault=SELECT UUID FROM DEFAULT_SETTINGS
ScanFilters.updateDefault=UPDATE DEFAULT_SETTINGS SET UUID = ?
### The following queries should not generally be called.  They are currently only used by SchemaUtil. ###
ScanFilters.updateUuid=UPDATE SETTINGS SET UUID = ? WHERE UUID = ?
ScanFilters.insertDefault=INSERT INTO DEFAULT_SETTINGS (UUID) VALUES (?)
ScanFilters.extensionDependencies=SELECT DISTINCT E.NAME,E.VERSION \
	FROM SETTINGS S, SETTING_FILTERS SF, EXTENSION_FINDING_TYPE_RELTN EFTR, EXTENSION E \
	WHERE S.UUID = ? AND \
	SF.SETTINGS_ID = S.ID AND \
	EFTR.FINDING_TYPE_ID = SF.FINDING_TYPE_ID AND \
	E.ID = EFTR.EXTENSION_ID
###                                                                                                    ###

#------------------------------------------------------------------------
# Server Locations
#------------------------------------------------------------------------
ServerLocations.checkLocation=SELECT UUID FROM SERVER_LOCATION WHERE UUID = ?
ServerLocations.deleteLocations=DELETE FROM SERVER_LOCATION
ServerLocations.insertLocation=INSERT INTO SERVER_LOCATION (UUID,PROTOCOL,HOST,PORT,CONTEXT_PATH,SERVER_USER,PASSWORD,AUTOSYNC,SAVEPASS,TEAMSERVER) VALUES (?,?,?,?,?,?,?,?,?,?)
ServerLocations.listLocations=SELECT L.UUID,S.NAME,L.PROTOCOL,L.HOST,L.PORT,L.CONTEXT_PATH,L.SERVER_USER,L.PASSWORD,L.AUTOSYNC,L.SAVEPASS,L.TEAMSERVER \
		FROM SERVER_LOCATION L, SERVER_IDENTITY S WHERE L.UUID = S.UUID
ServerLocations.deleteProjects=DELETE FROM SERVER_LOCATION_PROJECT
ServerLocations.insertServerProject=INSERT INTO SERVER_LOCATION_PROJECT (SERVER,PROJECT) VALUES (?,?)
ServerLocations.listServerProjects=SELECT PROJECT FROM SERVER_LOCATION_PROJECT WHERE SERVER = ?
ServerLocations.serverScanFilters=SELECT S.NAME,S.UUID,SF.UUID FROM SERVER_IDENTITY S, SERVER_DEFINITION_RELTN D, SETTINGS SF \
	WHERE D.SERVER_UUID = S.UUID AND SF.UUID = D.DEFINITION_UUID ORDER BY S.NAME,S.UUID
ServerLocations.checkIdentity=SELECT UUID FROM SERVER_IDENTITY WHERE UUID = ?
ServerLocations.insertIdentity=INSERT INTO SERVER_IDENTITY (UUID,NAME,REVISION) VALUES (?,?,?)
ServerLocations.deleteIdentity=DELETE FROM SERVER_IDENTITY WHERE UUID = ?
ServerLocations.selectIdentityRevision=SELECT REVISION FROM SERVER_IDENTITY WHERE UUID = ?
ServerLocations.listIdentities=SELECT UUID,NAME,REVISION FROM SERVER_IDENTITY
#------------------------------------------------------------------------
# Dashboard Settings
#------------------------------------------------------------------------
Dashboard.deleteUserSettings=DELETE FROM DASHBOARD_SETTINGS WHERE USER_ID = ?
Dashboard.insertReport=INSERT INTO DASHBOARD_SETTINGS (USER_ID,ROW_NUM,COL_NUM,REPORT_SETTINGS_UUID,OUTPUT_TYPE) VALUES (?,?,?,?,?)
Dashboard.selectReports=SELECT ROW_NUM,COL_NUM,REPORT_SETTINGS_UUID,OUTPUT_TYPE FROM DASHBOARD_SETTINGS WHERE USER_ID = ? ORDER BY ROW_NUM,COL_NUM
Dashboard.deleteReport=DELETE FROM DASHBOARD_SETTINGS WHERE USER_ID = ? AND ROW_NUM = ? AND COL_NUM = ?

#------------------------------------------------------------------------
# Plots
#------------------------------------------------------------------------
Plots.FindingType.count=SELECT COUNT(DISTINCT LM.FINDING_ID), LS.PROJECT \
	FROM LATEST_SCANS LS  INNER JOIN SCAN_OVERVIEW S ON S.SCAN_ID = LS.SCAN_ID \
	    INNER JOIN LOCATION_MATCH LM ON LM.FINDING_ID = S.FINDING_ID \
	    INNER JOIN FINDING_TYPE FT ON FT.ID = LM.FINDING_TYPE_ID AND FT.UUID = ? \
	WHERE LS.QUALIFIER = '__ALL_SCANS__' \
	GROUP BY LS.PROJECT \
	ORDER BY LS.PROJECT 

Plots.FindingTypes.count=SELECT COUNT(DISTINCT LM.FINDING_ID), LS.PROJECT \
	FROM LATEST_SCANS LS  INNER JOIN SCAN_OVERVIEW S ON S.SCAN_ID = LS.SCAN_ID \
	    INNER JOIN LOCATION_MATCH LM ON LM.FINDING_ID = S.FINDING_ID \
	    INNER JOIN FINDING_TYPE FT ON FT.ID = LM.FINDING_TYPE_ID AND FT.UUID IN ( %s ) \
	WHERE LS.QUALIFIER = '__ALL_SCANS__' \
	GROUP BY LS.PROJECT \
	ORDER BY LS.PROJECT 
	
Plots.Project.scanFindingsByProjectAndImportance=SELECT COUNT(*), \
 CASE WHEN F.IMPORTANCE = 0 THEN 'Irrelevant' \
      WHEN F.IMPORTANCE = 1 THEN 'Low' \
      WHEN F.IMPORTANCE = 2 THEN 'Medium' \
      WHEN F.IMPORTANCE = 3 THEN 'High' \
      ELSE 'Critical' END \
   ,LS.PROJECT \
   FROM LATEST_SCANS LS, SCAN_OVERVIEW SO, FINDING F \
   WHERE LS.PROJECT IN (%s) AND \
         SO.SCAN_ID = LS.SCAN_ID AND \
         F.ID = SO.FINDING_ID AND \
         F.IMPORTANCE IN (%s) \
   GROUP BY LS.PROJECT,F.IMPORTANCE \
   ORDER BY LS.PROJECT,F.IMPORTANCE 

Plots.Project.scanFindings=SELECT COUNT(*), \
 CASE WHEN F.IMPORTANCE = 0 THEN 'Irrelevant' \
      WHEN F.IMPORTANCE = 1 THEN 'Low' \
      WHEN F.IMPORTANCE = 2 THEN 'Medium' \
      WHEN F.IMPORTANCE = 3 THEN 'High' \
      ELSE 'Critical' END \
   ,S.SCAN_DATE_TIME \
   FROM SCAN S, PROJECT P, SCAN_OVERVIEW SO, FINDING F \
   WHERE P.NAME = ? AND \
         S.PROJECT_ID = P.ID AND \
         SO.SCAN_ID = S.ID AND \
         F.ID = SO.FINDING_ID AND \
         F.IMPORTANCE != 0 \
   GROUP BY S.SCAN_DATE_TIME,F.IMPORTANCE \
   ORDER BY S.SCAN_DATE_TIME,F.IMPORTANCE 

Plots.Project.linesOfCode=SELECT SUM(M.LINES_OF_CODE) \
	FROM LATEST_SCANS S, METRIC_CU M \
	WHERE S.PROJECT = ? AND M.SCAN_ID = S.SCAN_ID

Plots.Project.linesOfCodeByPackage=SELECT CU.PACKAGE_NAME, SUM(M.LINES_OF_CODE) \
	FROM LATEST_SCANS S, METRIC_CU M, COMPILATION_UNIT CU \
	WHERE S.PROJECT = ? AND M.SCAN_ID = S.SCAN_ID AND CU.ID = M.COMPILATION_UNIT_ID \
	GROUP BY CU.PACKAGE_NAME ORDER BY CU.PACKAGE_NAME

Plots.Project.compilations=SELECT COUNT(*),\
 CASE WHEN F.IMPORTANCE = 0 THEN 'Irrelevant' \
      WHEN F.IMPORTANCE = 1 THEN 'Low' \
      WHEN F.IMPORTANCE = 2 THEN 'Medium' \
      WHEN F.IMPORTANCE = 3 THEN 'High' \
      ELSE 'Critical' END \
   ,LM.PACKAGE_NAME \
   FROM LATEST_SCANS LS \
        INNER JOIN SCAN_OVERVIEW SO ON SO.SCAN_ID = LS.SCAN_ID \
        INNER JOIN FINDING F ON F.ID = SO.FINDING_ID \
        INNER JOIN LOCATION_MATCH LM ON LM.FINDING_ID = F.ID \
   WHERE LS.PROJECT = ? \
   GROUP BY LM.PACKAGE_NAME,F.IMPORTANCE \
   HAVING F.IMPORTANCE != 0 \
   ORDER BY LM.PACKAGE_NAME,F.IMPORTANCE 
   
Plots.Project.scanImportances=SELECT COUNT(*), \
 CASE WHEN F.IMPORTANCE = 0 THEN 'Irrelevant' \
      WHEN F.IMPORTANCE = 1 THEN 'Low' \
      WHEN F.IMPORTANCE = 2 THEN 'Medium' \
      WHEN F.IMPORTANCE = 3 THEN 'High' \
      ELSE 'Critical' END \
   ,S.SCAN_DATE_TIME \
   FROM SCAN S, SCAN_OVERVIEW SO, FINDING F \
   WHERE S.UUID IN (%s) AND \
         SO.SCAN_ID = S.ID AND \
         F.ID = SO.FINDING_ID AND \
         F.IMPORTANCE IN (%s) \
   GROUP BY S.SCAN_DATE_TIME,F.IMPORTANCE \
   ORDER BY S.SCAN_DATE_TIME,F.IMPORTANCE 

#Provide information on the findings that are different between two scans.  The query takes three scan UUIDs as arguments.
#It shows all findings in the first scan except for those in the second.  It looks up compilation information based on the 
#third scan argument
Plots.project.scanFindingsDiff=SELECT F.ID, \
        LM.PACKAGE_NAME, \
        SO.CU, \
        SO.LINE_OF_CODE, \
        FT.NAME, \
        SO.TOOL, \
        CASE WHEN F.IS_READ = 'Y' THEN 'Yes' ELSE 'No' END, \
        F.LAST_CHANGED, \
        CASE \
             WHEN F.IMPORTANCE=0 THEN 'Irrelevant' \
 	         WHEN F.IMPORTANCE=1 THEN 'Low' \
             WHEN F.IMPORTANCE=2 THEN 'Medium' \
             WHEN F.IMPORTANCE=3 THEN 'High' \
             WHEN F.IMPORTANCE=4 THEN 'Critical' \
        END, \
        SO.ARTIFACT_COUNT, \
        CASE WHEN COUNT.COUNT IS NULL THEN 0 ELSE COUNT.COUNT END, \
        F.SUMMARY, \
        LM.CLASS_NAME \
 FROM \
 	(SELECT FINDING_ID FROM SCAN_OVERVIEW WHERE SCAN_ID = (SELECT ID FROM SCAN WHERE UUID = ?) \
	EXCEPT \
	SELECT FINDING_ID FROM SCAN_OVERVIEW WHERE SCAN_ID = (SELECT ID FROM SCAN WHERE UUID = ?)) AS FINDINGS \
    INNER JOIN SCAN_OVERVIEW SO ON SO.FINDING_ID = FINDINGS.FINDING_ID \
    INNER JOIN FINDING F ON F.ID = SO.FINDING_ID \
    LEFT OUTER JOIN ( \
       SELECT \
          A.FINDING_ID "ID", COUNT(*) "COUNT" \
       FROM SIERRA_AUDIT A \
       GROUP BY A.FINDING_ID) AS COUNT ON COUNT.ID = F.ID \
    INNER JOIN LOCATION_MATCH LM ON LM.FINDING_ID = F.ID \
    INNER JOIN FINDING_TYPE FT ON FT.ID = LM.FINDING_TYPE_ID \
  WHERE SO.SCAN_ID = (SELECT ID FROM SCAN WHERE UUID = ?) \
 ORDER BY LM.PACKAGE_NAME, SO.CU, SO.LINE_OF_CODE

Plots.Project.compareScans=SELECT F.ID, \
        LM.PACKAGE_NAME, \
        SO.CU, \
        SO.LINE_OF_CODE, \
        FT.NAME, \
        SO.TOOL, \
        CASE WHEN F.IS_READ = 'Y' THEN 'Yes' ELSE 'No' END, \
        F.LAST_CHANGED, \
        CASE \
             WHEN F.IMPORTANCE=0 THEN 'Irrelevant' \
 	         WHEN F.IMPORTANCE=1 THEN 'Low' \
             WHEN F.IMPORTANCE=2 THEN 'Medium' \
             WHEN F.IMPORTANCE=3 THEN 'High' \
             WHEN F.IMPORTANCE=4 THEN 'Critical' \
        END, \
        CASE \
	            WHEN EARLIER.FINDING_ID IS NOT NULL THEN 'Unchanged' \
	            ELSE 'New' \
        END, \
        SO.ARTIFACT_COUNT, \
        CASE WHEN COUNT.COUNT IS NULL THEN 0 ELSE COUNT.COUNT END, \
        F.SUMMARY, \
        LM.CLASS_NAME \
 FROM \
    SCAN S \
    INNER JOIN SCAN_OVERVIEW SO ON SO.SCAN_ID = S.ID \
    INNER JOIN FINDING F ON F.ID = SO.FINDING_ID \
    LEFT OUTER JOIN SCAN_OVERVIEW EARLIER ON EARLIER.FINDING_ID = F.ID \
    LEFT OUTER JOIN ( \
       SELECT \
          A.FINDING_ID \"ID\", COUNT(*) \"COUNT\" \
       FROM SIERRA_AUDIT A \
       GROUP BY A.FINDING_ID) AS COUNT ON COUNT.ID = F.ID \
    INNER JOIN LOCATION_MATCH LM ON LM.FINDING_ID = F.ID \
    INNER JOIN FINDING_TYPE FT ON FT.ID = LM.FINDING_TYPE_ID \
 WHERE EARLIER.SCAN_ID = (SELECT ID FROM SCAN WHERE UUID = ?) AND S.UUID = ? \
 ORDER BY LM.PACKAGE_NAME, SO.CU, SO.LINE_OF_CODE

Plots.Scan.packageImportances=SELECT COUNT(*), \
 CASE WHEN F.IMPORTANCE = 0 THEN 'Irrelevant' \
      WHEN F.IMPORTANCE = 1 THEN 'Low' \
      WHEN F.IMPORTANCE = 2 THEN 'Medium' \
      WHEN F.IMPORTANCE = 3 THEN 'High' \
      ELSE 'Critical' END \
   ,LM.PACKAGE_NAME \
   FROM SCAN S, SCAN_OVERVIEW SO, LOCATION_MATCH LM, FINDING F \
   WHERE S.UUID = '%s' AND \
         SO.SCAN_ID = S.ID AND \
         LM.FINDING_ID = SO.FINDING_ID AND \
         LM.PACKAGE_NAME IN (%s) AND \
         F.ID = LM.FINDING_ID AND \
         F.IMPORTANCE IN (%s) \
   GROUP BY LM.PACKAGE_NAME,F.IMPORTANCE \
   ORDER BY LM.PACKAGE_NAME,F.IMPORTANCE
   
Plots.Scan.packageImportancesByCategory=SELECT COUNT(*), \
 CASE WHEN F.IMPORTANCE = 0 THEN 'Irrelevant' \
      WHEN F.IMPORTANCE = 1 THEN 'Low' \
      WHEN F.IMPORTANCE = 2 THEN 'Medium' \
      WHEN F.IMPORTANCE = 3 THEN 'High' \
      ELSE 'Critical' END \
   ,LM.PACKAGE_NAME \
   FROM SCAN S, SCAN_OVERVIEW SO, LOCATION_MATCH LM, FINDING F, FINDING_TYPE FT \
   WHERE S.UUID = '%s' AND \
         SO.SCAN_ID = S.ID AND \
         LM.FINDING_ID = SO.FINDING_ID AND \
         LM.PACKAGE_NAME IN (%s) AND \
		 FT.ID = LM.FINDING_TYPE_ID AND \
		 FT.UUID IN (%s) AND \
         F.ID = LM.FINDING_ID AND \
         F.IMPORTANCE IN (%s) \
   GROUP BY LM.PACKAGE_NAME,F.IMPORTANCE \
   ORDER BY LM.PACKAGE_NAME,F.IMPORTANCE
   
Plots.Scan.scanFindings=SELECT F.ID, \
        LM.PACKAGE_NAME, \
        SO.CU, \
        SO.LINE_OF_CODE, \
        CASE \
             WHEN F.IMPORTANCE=0 THEN 'Irrelevant' \
 	         WHEN F.IMPORTANCE=1 THEN 'Low' \
             WHEN F.IMPORTANCE=2 THEN 'Medium' \
             WHEN F.IMPORTANCE=3 THEN 'High' \
             WHEN F.IMPORTANCE=4 THEN 'Critical' \
        END, \
        F.SUMMARY \
 FROM \
    SCAN S \
    INNER JOIN SCAN_OVERVIEW SO ON SO.SCAN_ID = S.ID \
    INNER JOIN FINDING F ON F.ID = SO.FINDING_ID \
    INNER JOIN LOCATION_MATCH LM ON LM.FINDING_ID = F.ID \
 WHERE S.UUID = '%s' AND LM.PACKAGE_NAME IN (%s) AND F.IMPORTANCE IN (%s) \
 ORDER BY LM.PACKAGE_NAME, SO.CU, SO.LINE_OF_CODE
 
 Plots.Scan.scanFindingsByCategory=SELECT F.ID, \
        LM.PACKAGE_NAME, \
        SO.CU, \
        SO.LINE_OF_CODE, \
        CASE \
             WHEN F.IMPORTANCE=0 THEN 'Irrelevant' \
 	         WHEN F.IMPORTANCE=1 THEN 'Low' \
             WHEN F.IMPORTANCE=2 THEN 'Medium' \
             WHEN F.IMPORTANCE=3 THEN 'High' \
             WHEN F.IMPORTANCE=4 THEN 'Critical' \
        END, \
        F.SUMMARY \
 FROM \
    SCAN S \
    INNER JOIN SCAN_OVERVIEW SO ON SO.SCAN_ID = S.ID \
    INNER JOIN FINDING F ON F.ID = SO.FINDING_ID \
    INNER JOIN LOCATION_MATCH LM ON LM.FINDING_ID = F.ID \
    INNER JOIN FINDING_TYPE FT ON FT.ID = LM.FINDING_TYPE_ID \
 WHERE S.UUID = '%s' AND LM.PACKAGE_NAME IN (%s) AND FT.UUID IN (%s) AND F.IMPORTANCE IN (%s) \
 ORDER BY LM.PACKAGE_NAME, SO.CU, SO.LINE_OF_CODE




#------------------------------------------------------------------------
#                    FLASHLIGHT
#------------------------------------------------------------------------
#Run DAO
RunDAO.insert=insert into RUN (Name, RawDataVersion, UserName, JavaVersion, JavaVendor, OsName, OsArch, OsVersion, MaxMemoryMB, Processors, Started) values (?,?,?,?,?,?,?,?,?,?,?)
RunDAO.select=select Name, RawDataVersion, UserName, JavaVersion, JavaVendor, OsName, OsArch, OsVersion, MaxMemoryMB, Processors, Started from RUN

#Support for trace function
Trace.selectById=SELECT T.ID,T.PARENT,O.CLASSNAME,O.PACKAGENAME,S.INFILE,S.LOCATION,S.ATLINE \
 FROM TRACE T, SITE S, OBJECT O \
 WHERE T.ID = ? AND S.ID = T.SITE AND O.ID = S.INCLASS
#Support for object id function
ObjectId.selectClass=SELECT CO.CLASSNAME FROM OBJECT O, OBJECT CO WHERE O.ID = ? AND CO.ID = O.TYPE
#Support for finding the lock id from the lock object for read/write locks
LockId.selectRWLock=SELECT ID FROM RWLOCK WHERE ? IN (READLOCK,WRITELOCK)
# Calculate and write out the set of fields that are accessed by more than one thread during object construction.
LockSet.v2.badPublishes=SELECT A.FIELD,A.RECEIVER FROM ACCESS A \
 WHERE A.UNDERCONSTRUCTION = 'Y' \
 GROUP BY A.FIELD,A.RECEIVER \
 HAVING COUNT(DISTINCT A.INTHREAD) > 1
LockSet.v2.insertBadPublish=INSERT INTO BADPUBLISH (FIELD,RECEIVER) VALUES (?,?)
# The set of non-final, non-volatile fields that have writes outside of construction and are accessed by more than one thread
LockSet.v2.interestingFields=(SELECT DISTINCT A.FIELD,A.RECEIVER FROM \
       ACCESS A, FIELD F \
WHERE A.RW = 'W' AND A.UNDERCONSTRUCTION = 'N' AND F.VOLATILE = 'N' AND F.FINAL = 'N' AND F.ID = A.FIELD) INTERSECT \
(SELECT FIELD,RECEIVER FROM \
       ACCESS \
GROUP BY FIELD,RECEIVER \
HAVING COUNT(DISTINCT INTHREAD) > 1)

LockSet.v2.insertInterestingField=INSERT INTO INTERESTINGFIELD (FIELD,RECEIVER) VALUES (?,?)
# All field accesses, and the locks that are held.  If it is a RW lock, the parent lock is provided instead
LockSet.v2.fieldAccesses=SELECT A.TS,A.InThread, \
   CASE WHEN RW.Id IS NULL THEN D.Lock \
        ELSE RW.Id \
   END \
 FROM ACCESS A \
      INNER JOIN LOCKDURATION D ON D.InThread = A.InThread AND (A.TS BETWEEN D.Start AND D.Stop) AND State = 'HOLDING' \
      LEFT OUTER JOIN RWLOCK RW ON (RW.ReadLock = D.LOCK) OR (RW.WriteLock = D.LOCK) \
 WHERE A.Field = ? AND \
       A.Receiver = ?
#Walk over all of the held locks for a run
LockSet.v2.lockDurations=SELECT L.InThread, \
   L.Lock, \
   L.Start, \
   L.Stop, \
   L.StartEvent \
 FROM LOCKDURATION L \
 WHERE L.State = 'HOLDING' \
 ORDER BY Start
#Walk over all of the field accesses for a run
LockSet.v2.accesses=SELECT ID,TS, InThread, Field, Receiver, RW, UnderConstruction FROM ACCESS ORDER BY TS
LockSet.v2.indirectAccesses=SELECT ID,TS,INTHREAD,RECEIVER FROM INDIRECTACCESS ORDER BY TS
LockSet.v2.insertFieldLockSets=INSERT INTO FIELDLOCKSET (Field,Lock) VALUES (?,?)
LockSet.v2.insertInstanceLockSets=INSERT INTO FIELDINSTANCELOCKSET (Field,Receiver,Lock) VALUES (?,?,?)
LockSet.v2.insertStaticCounts=INSERT INTO FIELDSTATICTHREAD (Thread,Field,ReadCount,WriteCount) VALUES (?,?,?,?)
LockSet.v2.insertFieldCounts=INSERT INTO FIELDINSTANCETHREAD (Thread,Field,Receiver,ReadCount,WriteCount,ReadUCCount, WriteUCCount) VALUES (?,?,?,?,?,?,?)
LockSet.v2.updateAccessLocksHeld=INSERT INTO ACCESSLOCKSHELD (ACCESS,LOCKSHELD,LASTACQUISITION) VALUES (?,?,?)
LockSet.v2.updateIndirectAccessLocksHeld=INSERT INTO INDIRECTACCESSLOCKSHELD (ACCESS,LOCKSHELD,LASTACQUISITION) VALUES (?,?,?)
LockSet.v2.accessLocksHeldConstraint=ALTER TABLE ACCESSLOCKSHELD ADD CONSTRAINT ACCESSLOCKSHELDFK FOREIGN KEY (ACCESS) REFERENCES ACCESS (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
LockSet.v2.accessLockAcquisitionConstraint=ALTER TABLE ACCESSLOCKSHELD ADD CONSTRAINT ACCESSLOCKACQUIREDFK FOREIGN KEY (LASTACQUISITION) REFERENCES LOCK (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
LockSet.v2.indirectAccessLocksHeldConstraint=ALTER TABLE INDIRECTACCESSLOCKSHELD ADD CONSTRAINT INDIRECTACCESSLOCKSHELDFK FOREIGN KEY (ACCESS) REFERENCES INDIRECTACCESS (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
LockSet.v2.indirectAccessLockAcquisitionConstraint=ALTER TABLE INDIRECTACCESSLOCKSHELD ADD CONSTRAINT INDIRECTACCESSLOCKACQUIREDFK FOREIGN KEY (LASTACQUISITION) REFERENCES LOCK (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
# Calculate and write out the set of bad publishes
LockSet.badPublishes=INSERT INTO BADPUBLISH (RUN,FIELD,RECEIVER) SELECT F.RUN,F.ID,A.RECEIVER FROM FIELD F, ACCESS A \
 WHERE F.RUN = ? AND \
       A.RUN = F.RUN AND \
       A.FIELD = F.ID AND \
       A.UNDERCONSTRUCTION = 'Y' \
 GROUP BY F.RUN,F.ID,A.RECEIVER \
 HAVING COUNT(DISTINCT A.INTHREAD) > 1
# The set of fields that have writes outside of construction and are accessed by more than one thread
LockSet.interestingFields=INSERT INTO INTERESTINGFIELD (RUN,FIELD,RECEIVER) SELECT F0.RUN,F0.ID,A.RECEIVER FROM \
(SELECT DISTINCT F.RUN "RUN", F.ID "ID",A.RECEIVER "RECEIVER" FROM FIELD F, ACCESS A \
 WHERE F.RUN = ? AND \
       A.RUN = F.RUN AND \
       A.FIELD = F.ID AND \
       F.VOLATILE = 'N' AND \
       F.FINAL = 'N' AND \
       A.UNDERCONSTRUCTION = 'N' AND \
       A.RW = 'W') AS F0, ACCESS A \
WHERE A.RUN = F0.RUN AND A.FIELD = F0.ID AND A.RECEIVER = F0.RECEIVER OR (A.RECEIVER IS NULL AND F0.RECEIVER IS NULL) \
GROUP BY F0.RUN,F0.ID, A.RECEIVER \
HAVING COUNT(DISTINCT INTHREAD) > 1
# All field accesses, and the locks that are held.  If it is a RW lock, the parent lock is provided instead
LockSet.fieldAccesses=SELECT A.TS,A.InThread, \
   CASE WHEN RW.Id IS NULL THEN D.Lock \
        ELSE RW.Id \
   END \
 FROM ACCESS A \
      INNER JOIN LOCKDURATION D ON D.InThread = A.InThread AND (A.TS BETWEEN D.Start AND D.Stop) AND State = 'HOLDING' \
      LEFT OUTER JOIN RWLOCK RW ON (RW.ReadLock = D.LOCK) OR (RW.WriteLock = D.LOCK) \
 WHERE A.Run = ? AND \
       A.Field = ? AND \
       A.Receiver = ?
#Walk over all of the held locks for a run
LockSet.lockDurations=SELECT L.InThread, \
   CASE WHEN RW.Id IS NULL THEN L.Lock \
        ELSE RW.Id \
   END, \
   L.Start, \
   L.Stop \
 FROM LOCKDURATION L LEFT OUTER JOIN RWLOCK RW ON RW.Run = L.Run AND (RW.ReadLock = L.Lock OR RW.WriteLock = L.Lock) \
 WHERE L.State = 'HOLDING' AND L.Run = ? \
 ORDER BY Start
#Walk over all of the field accesses for a run
LockSet.accesses=SELECT TS, InThread, Field, Receiver, RW, UnderConstruction FROM ACCESS WHERE Run = ? ORDER BY TS
LockSet.insertFieldLockSets=INSERT INTO FIELDLOCKSET (Run,Field,Lock) VALUES (?,?,?)
LockSet.insertInstanceLockSets=INSERT INTO FIELDINSTANCELOCKSET (Run,Field,Receiver,Lock) VALUES (?,?,?,?)
LockSet.insertStaticCounts=INSERT INTO FIELDSTATICTHREAD (Run,Thread,Field,ReadCount,WriteCount) VALUES (?,?,?,?,?)
LockSet.insertFieldCounts=INSERT INTO FIELDINSTANCETHREAD (Run,Thread,Field,Receiver,ReadCount,WriteCount,ReadUCCount, WriteUCCount) VALUES (?,?,?,?,?,?,?,?)

#------------------------------------------------------------------------
# surelogic.com Services queries
#------------------------------------------------------------------------
WebServices.insertSupportRequest=INSERT INTO SUPPORT_REQUEST (REMOTE_IP, REMOTE_HOSTNAME, REQUEST_TYPE, HTTP_HEADERS, BODY, SENDER, CLIENT_OS, CLIENT_JAVA, CLIENT_IDE, LICENSE_ID, LICENSE_TOOL, LICENSE_HOLDER, LICENSE_EXPIRATION) values (?,?,?,?,?,?,?,?,?,?,?,?,?)

WebServices.insertEvaluationLicense=INSERT INTO FL_LICENSE_EVALUATION (EMAIL,FIRSTNAME,LASTNAME,COMPANY,LICENSE) VALUES (?,?,?,?,?)