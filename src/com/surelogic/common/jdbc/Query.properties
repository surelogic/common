#  XXXXX                          XXXXX                      X
# X     X                           X
# X                                 X
# X       XX  XX  XXX XX   XXXXX    X      XXXXX   XXXXXX  XXX     XXXXX
#  XXXXX   X   X    XX  X X     X   X     X     X X    X     X    X     X
#       X  X   X    X     XXXXXXX   X     X     X X    X     X    X
#       X  X   X    X     X         X     X     X X    X     X    X
# X     X  X  XX    X     X     X   X   X X     X  XXXXX     X    X     X
#  XXXXX    XX XX XXXXX    XXXXX  XXXXXXX  XXXXX       X   XXXXX   XXXXX
#                                                      X
#                                                  XXXX
#
# Default query bank file.

#------------------------------------------------------------------------
# Numbered Queries
#
# Please keep in numerical order
#------------------------------------------------------------------------
query.00001=select PROJECT from PROJECT_OVERVIEW order by PROJECT
query.00002=select C.NAME, T.NAME, T.SHORT_MESSAGE, T.UUID from FINDING_TYPE T, FINDING_CATEGORY C where T.CATEGORY_ID = C.ID and T.ID in (select FINDING_TYPE_ID from ARTIFACT_TYPE, TOOL where TOOL_ID = TOOL.ID and TOOL.NAME != 'Checkstyle') order by 1,2,3
query.00003=select distinct T.NAME, A.MNEMONIC, A.LINK, A.CATEGORY from FINDING_TYPE F, ARTIFACT_TYPE A, TOOL T where T.ID=A.TOOL_ID and F.ID=A.FINDING_TYPE_ID and F.UUID='%s'
query.00004=select INFO from FINDING_TYPE where UUID='%s'
query.00005=select SUMMARY, IMPORTANCE, FINDING_ID, PROJECT, PACKAGE, CLASS, LINE_OF_CODE, FINDING_TYPE, CATEGORY, TOOL from FINDINGS_OVERVIEW %s order by case when IMPORTANCE='Irrelevant' then 5 when IMPORTANCE='Low' then 4 when IMPORTANCE='Medium' then 3 when IMPORTANCE='High' then 2 when IMPORTANCE='Critical' then 1 end, SUMMARY
query.00006=select %s, count(*) from FINDINGS_OVERVIEW %s group by %s
query.00007=create table VERSION (N INT NOT NULL)
query.00008=drop table VERSION
query.00009=select N from VERSION
query.00010=insert into VERSION values (0)
query.00011=update VERSION set N=%d
query.00012=select S.SCHEMANAME "SCHEMA", T.TABLENAME "TABLE NAME" from SYS.SYSTABLES T, SYS.SYSSCHEMAS S where T.SCHEMAID = S.SCHEMAID order by 1,2
query.00013=select C.COLUMNNAME "COLUMN NAME", C.COLUMNDATATYPE "TYPE NAME" from SYS.SYSCOLUMNS C, SYS.SYSTABLES T, SYS.SYSSCHEMAS S where C.REFERENCEID=T.TABLEID and T.SCHEMAID=S.SCHEMAID and T.TABLENAME='%s' and S.SCHEMANAME='%s' order by C.COLUMNNUMBER
query.00014=select T.NAME, A.MESSAGE, CU.PACKAGE_NAME, SL.CLASS_NAME, SL.LINE_OF_CODE, SL.END_LINE_OF_CODE, SL.LOCATION_TYPE, SL.IDENTIFIER from ARTIFACT A, ARTIFACT_TYPE ART, TOOL T, SOURCE_LOCATION SL, COMPILATION_UNIT CU where A.ID=%d and ART.ID=A.ARTIFACT_TYPE_ID and T.ID=ART.TOOL_ID and SL.ID=A.PRIMARY_SOURCE_LOCATION_ID and CU.ID=SL.COMPILATION_UNIT_ID
query.00015=select CU.PACKAGE_NAME, SL.CLASS_NAME, SL.LINE_OF_CODE, SL.END_LINE_OF_CODE, SL.LOCATION_TYPE, SL.IDENTIFIER from ARTIFACT_SOURCE_LOCATION_RELTN ASLR, SOURCE_LOCATION SL, COMPILATION_UNIT CU where ASLR.ARTIFACT_ID=%d and SL.ID=ASLR.SOURCE_LOCATION_ID and CU.ID=SL.COMPILATION_UNIT_ID
query.00016=select A.FINDING_ID, SU.USER_NAME, A.EVENT, A.VALUE, A.DATE_TIME from SIERRA_AUDIT A left outer join SIERRA_USER SU on SU.ID = A.USER_ID where FINDING_ID=%d order by A.DATE_TIME

#------------------------------------------------------------------------
# Named Queries
#------------------------------------------------------------------------
portal.finding.byId=SELECT F.ID,F.IMPORTANCE,F.SUMMARY,FT.NAME,FC.NAME,P.NAME,LM.PACKAGE_NAME,LM.CLASS_NAME FROM FINDING F, LOCATION_MATCH LM, FINDING_TYPE FT, FINDING_CATEGORY FC, PROJECT P WHERE F.ID = ? AND LM.FINDING_ID = F.ID AND FT.ID = LM.FINDING_TYPE_ID AND FC.ID = FT.CATEGORY_ID AND P.ID = LM.PROJECT_ID
portal.finding.byUuid=SELECT F.ID,F.IMPORTANCE,F.SUMMARY,FT.NAME,FC.NAME,P.NAME,LM.PACKAGE_NAME,LM.CLASS_NAME FROM FINDING F, LOCATION_MATCH LM, FINDING_TYPE FT, FINDING_CATEGORY FC, PROJECT P WHERE F.UUID = ? AND LM.FINDING_ID = F.ID AND FT.ID = LM.FINDING_TYPE_ID AND FC.ID = FT.CATEGORY_ID AND P.ID = LM.PROJECT_ID
portal.finding.auditsById=SELECT A.EVENT, A.VALUE, A.DATE_TIME, U.USER_NAME FROM SIERRA_AUDIT A, SIERRA_USER U WHERE FINDING_ID = ? ORDER BY A.DATE_TIME

#------------------------------------------------------------------------
# Revision
#------------------------------------------------------------------------
Revision.maxRevision=SELECT MAX(REVISION) FROM REVISION

#------------------------------------------------------------------------
# Definitional Data
#------------------------------------------------------------------------
Definitions.insertDefinition=INSERT INTO SERVER_DEFINITION_RELTN (DEFINITION_UUID,SERVER_UUID) VALUES (?,?)
Definitions.deleteDefintion=DELETE FROM SERVER_DEFINITION_RELTN WHERE DEFINITION_UUID = ?

#------------------------------------------------------------------------
# Finding Types
#------------------------------------------------------------------------

FindingTypes.findByUid=SELECT ID,UUID,NAME,SHORT_MESSAGE,INFO FROM FINDING_TYPE WHERE UUID = ?
FindingTypes.findById=SELECT ID,UUID,NAME,SHORT_MESSAGE,INFO FROM FINDING_TYPE WHERE ID = ?
FindingTypes.findArtifactTypeById=SELECT ID,MNEMONIC FROM ARTIFACT_TYPE WHERE FINDING_TYPE_ID = ?
FindingTypes.listFindingTypes=SELECT UUID FROM FINDING_TYPE
FindingTypes.query=SELECT UUID,NAME FROM FINDING_TYPE WHERE NAME LIKE ?
#------------------------------------------------------------------------
# Filter Sets
#------------------------------------------------------------------------
FilterSetRecord.generated=true
FilterSetRecord.insert=INSERT INTO FILTER_SET (UUID,REVISION,NAME,INFO) VALUES (?,?,?,?)
FilterSetRecord.select=SELECT ID,REVISION,NAME,INFO FROM FILTER_SET WHERE UUID = ?
FilterSetRecord.delete=DELETE FROM FILTER_SET WHERE ID = ?
FilterSetRecord.update=UPDATE FILTER_SET SET REVISION = ?, NAME = ?, INFO = ? WHERE ID = ?

FilterSets.listFilterSets=SELECT UUID FROM FILTER_SET
FilterSets.listFilterSetFilters=SELECT FT.UUID,FE.FILTERED FROM FILTER_ENTRY FE, FINDING_TYPE FT WHERE FE.FILTER_SET_ID = ? AND FT.ID = FE.FINDING_TYPE_ID
FilterSets.listFilterSetParents=SELECT FS.UUID FROM FILTER_SET_RELTN FSR, FILTER_SET FS WHERE FSR.CHILD_ID = ? AND FS.ID = FSR.PARENT_ID
FilterSets.deleteFilterSetParents=DELETE FROM FILTER_SET_RELTN WHERE CHILD_ID = ?
FilterSets.insertFilterSetParent=INSERT INTO FILTER_SET_RELTN (CHILD_ID, PARENT_ID) VALUES (?,?)
FilterSets.findParents=SELECT PFS.UUID FROM FILTER_SET CFS, FILTER_SET PFS, FILTER_SET_RELTN FSR WHERE CFS.UUID = ? AND FSR.CHILD_ID = CFS.ID AND PFS.ID = FSR.PARENT_ID
FilterSets.deleteFilterSetEntries=DELETE FROM FILTER_ENTRY WHERE FILTER_SET_ID = ?
FilterSets.insertFilterSetEntry=INSERT INTO FILTER_ENTRY (FILTER_SET_ID, FINDING_TYPE_ID, FILTERED) VALUES (?,(SELECT MAX(ID) FROM FINDING_TYPE WHERE UUID = ?), ?)
FilterSets.query=SELECT UUID,NAME FROM FILTER_SET WHERE NAME LIKE ?

#------------------------------------------------------------------------
# Scan Filters
#------------------------------------------------------------------------
ScanFilterRecord.generated=true
ScanFilterRecord.insert=INSERT INTO SETTINGS (UUID,NAME,REVISION) VALUES (?,?,?)
ScanFilterRecord.select=SELECT ID,NAME,REVISION FROM SETTINGS WHERE UUID = ?
ScanFilterRecord.delete=DELETE FROM SETTINGS WHERE ID = ?
ScanFilterRecord.update=UPDATE SETTINGS SET REVISION = ?, NAME = ? WHERE ID = ?

ScanFilters.deleteTypeFilters=DELETE FROM SETTING_FILTERS WHERE SETTINGS_ID = ?
ScanFilters.deleteCategoryFilters=DELETE FROM SETTING_FILTER_SETS WHERE SETTINGS_ID = ?
ScanFilters.insertTypeFilter=INSERT INTO SETTING_FILTERS (SETTINGS_ID,FINDING_TYPE_ID,IMPORTANCE,FILTERED) VALUES (?,(SELECT ID FROM FINDING_TYPE WHERE UUID = ?),?,?)
ScanFilters.insertCategoryFilter=INSERT INTO SETTING_FILTER_SETS (SETTINGS_ID,FILTER_SET_ID,IMPORTANCE) VALUES (?,(SELECT ID FROM FILTER_SET WHERE UUID = ?),?)
ScanFilters.insertProject=INSERT INTO SETTINGS_PROJECT_RELTN (SETTINGS_ID, PROJECT_NAME) VALUES (?,?)
ScanFilters.listScanFilters=SELECT UUID FROM SETTINGS
ScanFilters.listFilterSets=SELECT FS.UUID,SFS.IMPORTANCE FROM SETTINGS S, SETTING_FILTER_SETS SFS, FILTER_SET FS WHERE S.UUID = ? AND SFS.SETTINGS_ID = S.ID AND FS.ID = SFS.FILTER_SET_ID
ScanFilters.listProjects=SELECT SP.PROJECT_NAME FROM SETTINGS S, SETTINGS_PROJECT_RELTN SP WHERE S.UUID = ? AND SP.SETTINGS_ID = S.ID
ScanFilters.listFilters=SELECT FT.UUID, SF.IMPORTANCE, SF.FILTERED FROM SETTINGS S, SETTING_FILTERS SF, FINDING_TYPE FT WHERE S.UUID = ? AND SF.SETTINGS_ID = S.ID AND FT.ID = SF.FINDING_TYPE_ID 
ScanFilters.selectByProject=SELECT S.UUID FROM SETTINGS S, SETTINGS_PROJECT_RELTN SP WHERE SP.PROJECT_NAME = ? AND S.ID = SP.SETTINGS_ID
ScanFilters.deleteProjectRelation=DELETE FROM SETTINGS_PROJECT_RELTN WHERE PROJECT_NAME = ?
#------------------------------------------------------------------------
# Plots
#------------------------------------------------------------------------
Plots.FindingType.count=SELECT COUNT(DISTINCT LM.FINDING_ID), LS.PROJECT \
	FROM LATEST_SCANS LS, ARTIFACT A, ARTIFACT_FINDING_RELTN AFR, LOCATION_MATCH LM, FINDING_TYPE FT \
	WHERE FT.UUID = ? AND \
      LM.FINDING_TYPE_ID = FT.ID AND \
      AFR.FINDING_ID = LM.FINDING_ID AND \
      A.ID = AFR.ARTIFACT_ID AND \
      A.SCAN_ID = LS.SCAN_ID AND \
      LS.QUALIFIER = '__ALL_SCANS__' \
	GROUP BY LS.PROJECT \
	ORDER BY LS.PROJECT
	
	
	
#------------------------------------------------------------------------
#                    FLASHLIGHT
#------------------------------------------------------------------------

# The set of fields that have a field access by more than one thread during construction
LockSet.badPublishes=SELECT F.ID,A.RECEIVER FROM FIELD F, ACCESS A \
 WHERE F.RUN = ? AND \
       A.RUN = F.RUN AND \
       A.FIELD = F.ID AND \
       A.UNDERCONSTRUCTION = 'Y' \
 GROUP BY F.ID,A.RECEIVER \
 HAVING COUNT(DISTINCT A.INTHREAD) > 1
# The set of fields that have writes outside of construction and are accessed by more than one thread
LockSet.interestingFields=SELECT F0.ID,A.RECEIVER FROM \
(SELECT DISTINCT F.RUN "RUN", F.ID "ID",A.RECEIVER "RECEIVER" FROM FIELD F, ACCESS A \
 WHERE F.RUN = ? AND \
       A.RUN = F.RUN AND \
       A.FIELD = F.ID AND \
       F.VOLATILE = 'N' AND \
       F.FINAL = 'N' AND \
       A.UNDERCONSTRUCTION = 'N' AND \
       A.RW = 'W') AS F0, ACCESS A \
WHERE A.RUN = F0.RUN AND A.FIELD = F0.ID AND A.RECEIVER = F0.RECEIVER \
GROUP BY F0.ID, A.RECEIVER \
HAVING COUNT(DISTINCT INTHREAD) > 1
# All field accesses, and the locks that are held.  If it is a RW lock, the parent lock is also provided
LockSet.fieldAccesses=SELECT A.TS,A.InThread, \
   CASE WHEN RW.Id IS NULL THEN D.Lock \
        ELSE RW.Id \
   END \
 FROM ACCESS A \
      INNER JOIN LOCKDURATION D ON D.InThread = A.InThread AND D.Start < A.TS AND D.Stop > A.TS AND State = 'HOLDING' \
      LEFT OUTER JOIN RWLOCK RW ON (RW.ReadLock = D.LOCK) OR (RW.WriteLock = D.LOCK) \
 WHERE A.Run = ? AND \
       A.Field = ? AND \
       A.Receiver = ?
#Insert a field that does not pass the lock set analysis
LockSet.insertSuspiciousField=INSERT INTO BADLOCKSET (Run,Field,Receiver) VALUES (?,?,?)
#Insert a field that is incorrectly published during construction
LockSet.insertBadPublish=INSERT INTO BADPUBLISH (Run,Field,Receiver) VALUES (?,?,?)
LockSet.testQuery=SELECT FIELDS.FIELD, FIELDS.RECEIVER, A.TS, A.InThread, D.Lock FROM\
(SELECT F0.RUN "RUN",F0.ID "FIELD",A.RECEIVER "RECEIVER" FROM \
  (SELECT DISTINCT F.RUN "RUN", F.ID "ID",A.RECEIVER "RECEIVER" FROM FIELD F, ACCESS A \
    WHERE F.RUN = ? AND \
       A.RUN = F.RUN AND \
       A.FIELD = F.ID AND \
       F.VOLATILE = 'N' AND \
       F.FINAL = 'N' AND \
       A.UNDERCONSTRUCTION = 'N' AND \
       A.RW = 'W') AS F0, ACCESS A \
  WHERE A.RUN = F0.RUN AND A.FIELD = F0.ID AND A.RECEIVER = F0.RECEIVER \
  GROUP BY F0.RUN, F0.ID, A.RECEIVER \
  HAVING COUNT(DISTINCT INTHREAD) > 1) AS FIELDS, ACCESS A, LOCKDURATION D \
 WHERE A.Run = FIELDS.RUN AND \
       A.Field = FIELDS.FIELD AND \
       A.Receiver = FIELDS.RECEIVER AND \
       D.InThread = A.InThread AND D.Start < A.TS AND D.Stop > A.TS AND State = 'HOLDING' 
